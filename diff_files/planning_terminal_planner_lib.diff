diff --git a/planning/terminal_planner_libs/BUILD b/planning/terminal_planner_libs/BUILD
index 1c46ea022..935096eee 100644
--- a/planning/terminal_planner_libs/BUILD
+++ b/planning/terminal_planner_libs/BUILD
@@ -10,6 +10,9 @@ cc_library(
     includes = ["include"],
     visibility = ["//visibility:public"],
     deps = [
+        "//common/adk_standards",
+        "//common/utils_math",
+        "//planning/planning_common",
         "@eigen",
     ],
 )
diff --git a/planning/terminal_planner_libs/CMakeLists.txt b/planning/terminal_planner_libs/CMakeLists.txt
index 523256fd7..9fc276c44 100644
--- a/planning/terminal_planner_libs/CMakeLists.txt
+++ b/planning/terminal_planner_libs/CMakeLists.txt
@@ -11,13 +11,14 @@ set(CATKIN_COMPONENTS
     roslib
     roscpp
     adk_standards
+    planning_common
+    utils_math
 )
 
 find_package(catkin REQUIRED COMPONENTS ${CATKIN_COMPONENTS})
 find_package(Eigen3 REQUIRED)
 find_package(Boost REQUIRED COMPONENTS)
 find_package(rosunit REQUIRED)
-find_package(adk_standards REQUIRED COMPONENTS)
 
 set(PYBIND11_PYTHON_VERSION 3.8.10)
 find_package(pybind11 REQUIRED)
@@ -32,6 +33,7 @@ catkin_package(
 
 set(PROJECT_INCLUDE_DIRS ${EIGEN3_INCLUDE_DIRS} ${Boost_INCLUDE_DIRS})
 include_directories(${PROJECT_INCLUDE_DIRS})
+include_directories(${PROJECT_SOURCE_DIR}/include)
 include_directories(${PROJECT_SOURCE_DIR}/include/${PROJECT_NAME})
 include_directories(${catkin_INCLUDE_DIRS})
 include_directories(${PYTHON_INCLUDE_DIRS} ${PROJECT_SOURCE_DIR}/include)
@@ -47,6 +49,7 @@ add_library(terminal_planner_libs
     src/free_space_planner/geometric_vector2d.cpp
     src/free_space_planner/maneuver.cpp
     src/free_space_planner/free_space_planner.cpp
+    src/terminal_behavior_helpers.cpp
 )
 
 target_link_libraries(terminal_planner_libs PUBLIC
@@ -61,7 +64,7 @@ if(CATKIN_ENABLE_TESTING)
 endif()
 
 
-# Install 
+# Install
 
 install(DIRECTORY include/${PROJECT_NAME}/
   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
@@ -84,5 +87,3 @@ set_target_properties(terminal_planner_py
 install(TARGETS terminal_planner_py
   ARCHIVE DESTINATION ${CATKIN_PACKAGE_PYTHON_DESTINATION}
   LIBRARY DESTINATION ${CATKIN_PACKAGE_PYTHON_DESTINATION})
-  
-  
diff --git a/planning/terminal_planner_libs/README.md b/planning/terminal_planner_libs/README.md
index 8b1378917..11f88117c 100644
--- a/planning/terminal_planner_libs/README.md
+++ b/planning/terminal_planner_libs/README.md
@@ -1 +1,29 @@
+# Terminal Planner Library
 
+## Piano Mover
+This class implements the free space planner described in: https://arxiv.org/abs/2306.01301.
+
+In Piano Mover, the actor has 6 possible maneuver types specified in `ManeuverType`. In our case for trucks, we do not allow reverse maneuvers, so the only 3 we care about are `FORWARD_STRAIGHT`, `FORWARD_CW` (right turn), and `FORWARD_CCW` (left turn). Given a costmap and free space parameters, the Piano Mover finds the optimal path of maneuvers, each consisting of maneuver type and maneuver end pose.
+
+To use Piano Mover, first run `GoalSearch` to find the goal state with optimal cost. Then, run `BackTrack` on the searched goal to backtrack the whole optimal path.
+
+## Free Space Planner
+This class is used by the planner directly to plan a path through free space.
+
+The `plan` function takes in a start and end pose, and outputs a vector of paths for alternating maneuver directions. It uses `PianoMover` to plan maneuvers, then post-processes and expands the maneuvers into dense paths of points.
+
+`FreeSpacePlannerParameters` specifies all the parameters the free space planner uses. They need to be tuned for the specific vehicle and ODD for the planner to work correctly.
+
+### Free Space Planner Notebook
+The `free_space_planner.ipynb` notebook is an important tool for developing and tuning the free space planner. The c++ pybinds in `terminal_planner_py.cpp` are required to run the notebook.
+
+In the notebook, we can visualize the 2D costmap and configuration space costmap to make sure they align with what the Ego perceives from maps and perception. Please utilize `Save` and `Load` functions of the costmap for easier debugging.
+
+We can also run free space planner and plot the output path on top of the costmap to make sure we're computing the optimal path.
+
+To launch the notebook, the easiest way is attach VSCode to the `brain` docker container, then run `jupyter notebook` inside VSCode command line. VSCode will help port forward the notebook server to your local machine.
+
+## Terminal Behavior Helpers
+`terminal_behavior_helpers.h` contains a lot of common helper functions for parking and unparking behaviors.
+
+See function header comments for more detail.
diff --git a/planning/terminal_planner_libs/include/free_space_planner/distance.h b/planning/terminal_planner_libs/include/free_space_planner/distance.h
index 99bfe226e..e15b324bc 100644
--- a/planning/terminal_planner_libs/include/free_space_planner/distance.h
+++ b/planning/terminal_planner_libs/include/free_space_planner/distance.h
@@ -39,4 +39,15 @@ double Distance(const Pose2D& p1, const Pose2D& p2);
  */
 double Distance(const Vector2d& point, const Vector2d& segment_start, const Vector2d& segment_end);
 
+/**
+ * @brief Compute the closest point on a segment to a given point.
+ *
+ * @param point Point.
+ * @param segment_start Start of the segment.
+ * @param segment_end End of the segment.
+ * @return The closest point on the segment and the distance to the point.
+ */
+std::pair<Vector2d, double> ClosestPoint(const Vector2d& point, const Vector2d& segment_start,
+                                         const Vector2d& segment_end);
+
 } // namespace planning
diff --git a/planning/terminal_planner_libs/include/free_space_planner/free_space_planner.h b/planning/terminal_planner_libs/include/free_space_planner/free_space_planner.h
index 316ddc1f8..9e8a73aaa 100644
--- a/planning/terminal_planner_libs/include/free_space_planner/free_space_planner.h
+++ b/planning/terminal_planner_libs/include/free_space_planner/free_space_planner.h
@@ -1,5 +1,6 @@
 #pragma once
 
+#include <cmath>
 #include <cstddef>
 
 #include "free_space_planner/maneuver.h"
@@ -20,15 +21,15 @@ const EgoFootprint TRUCK_301{
  */
 struct FreeSpacePlannerParameters
 {
-  float turning_radius{ 6.0 };  // turning radius of the vehicle [meters]
-  float transition_cost{ 0.1 }; // cost of transitioning between different maneuvers
-  int iterations{ 2 };          // number of iterations for the piano mover planner
-  float search_radius{ 1.0 };   // search radius to use for improved goal search [meters]
-  float cell_size{ 0.3 };       // size of a cell in the costmap [meters]
-  int space_dim_size{ 128 };    // size of the space dimension in the costmap
-  int angle_dim_size{ 128 };    // size of the angle dimension in the costmap
-  float weight1{ 2.0 };         // weight for the distance cost in the goal search algorithm
-  float weight2{ 2.0 };         // weight for the heading cost in the goal search algorithm
+  float turning_radius{ NAN };  // turning radius of the vehicle [meters]
+  float transition_cost{ NAN }; // cost of transitioning between different maneuvers
+  int iterations{ -1 };         // number of iterations for the piano mover planner
+  float search_radius{ NAN };   // search radius to use for improved goal search [meters]
+  float cell_size{ NAN };       // size of a cell in the costmap [meters]
+  int space_dim_size{ -1 };     // size of the space dimension in the costmap
+  int angle_dim_size{ -1 };     // size of the angle dimension in the costmap
+  float weight1{ NAN };         // weight for the distance cost in the goal search algorithm
+  float weight2{ NAN };         // weight for the heading cost in the goal search algorithm
 };
 
 /**
diff --git a/planning/terminal_planner_libs/include/free_space_planner/rasterization.h b/planning/terminal_planner_libs/include/free_space_planner/rasterization.h
new file mode 100644
index 000000000..e19ca01ba
--- /dev/null
+++ b/planning/terminal_planner_libs/include/free_space_planner/rasterization.h
@@ -0,0 +1,267 @@
+#pragma once
+
+#include <Eigen/Dense>
+#include <cmath>
+#include <type_traits>
+#include <unordered_set>
+#include <vector>
+
+#include "adk_macros/check.h"
+#include "free_space_planner/geometric_vector2d.h"
+
+namespace planning {
+
+namespace rasterization_lib {
+/**
+ * @brief Check if the intersection point is within the start and end points.
+ *
+ * @param intersection Intersection point of the line segment with the boundary.
+ * @param start Start point of the line segment.
+ * @param end End point of the line segment.
+ * @return true If the intersection point is within the start and end points.
+ * @return false If the intersection point is not within the start and end points.
+ */
+inline bool checkIntersectionWithinStartEnd(const Eigen::Vector2d& intersection, const Eigen::Vector2d& start,
+                                            const Eigen::Vector2d& end)
+{
+  return (intersection[0] >= std::min(start[0], end[0]) && intersection[0] <= std::max(start[0], end[0]) &&
+          intersection[1] >= std::min(start[1], end[1]) && intersection[1] <= std::max(start[1], end[1]));
+}
+
+/**
+ * @brief Get the intersection points of the line segment with the boundary.
+ *
+ * @param line_segment Line segment to check for intersection with the boundary.
+ * @param rows Number of rows for the 1-D buffer.
+ * @param columns Number of columns for the 1-D buffer.
+ * @return std::vector<Eigen::Vector2d> Intersection points of the line segment with the boundary.
+ */
+inline std::vector<Eigen::Vector2d> getIntersectionsWithBoundary(const GeometricVector2d& line_segment, int rows,
+                                                                 int columns)
+{
+  Eigen::Vector2d top_left(0, 0);
+  Eigen::Vector2d top_right(columns, 0);
+  Eigen::Vector2d bottom_left(0, rows);
+  Eigen::Vector2d bottom_right(columns, rows);
+  std::vector<Eigen::Vector2d> boundaries = { top_left, top_right, bottom_right, bottom_left };
+
+  std::vector<Eigen::Vector2d> intersections;
+  std::vector<Eigen::Vector2d> intersections_result;
+
+  for (std::size_t i = 0; i < boundaries.size(); ++i) {
+    Eigen::Vector2d start_point = boundaries[i];
+    Eigen::Vector2d end_point = boundaries[(i + 1) % boundaries.size()];
+    std::optional<Eigen::Vector2d> intersection =
+        line_segment.Intersection(GeometricVector2d(start_point, end_point - start_point));
+    if (!intersection) {
+      continue;
+    }
+    if (checkIntersectionWithinStartEnd(intersection.value(), start_point, end_point) &&
+        checkIntersectionWithinStartEnd(intersection.value(), line_segment.origin(),
+                                        line_segment.origin() + line_segment.direction())) {
+      // Only add the intersection point if it is within the start and end points of the line segment and the boundary
+      intersections.push_back(intersection.value());
+    }
+  }
+
+  // Keep a set of unique intersection points to return, checking each point by floating point comparison
+  // Duplicate intersection can occur when line segment intersects with corner of the boundary
+  for (const auto& intersection : intersections) {
+    bool is_unique = true;
+    for (const auto& intersection_result : intersections_result) {
+      if (std::abs(intersection[0] - intersection_result[0]) < 1e-6 &&
+          std::abs(intersection[1] - intersection_result[1]) < 1e-6) {
+        is_unique = false;
+      }
+    }
+    if (!is_unique) {
+      continue;
+    }
+    intersections_result.push_back(intersection);
+  }
+
+  return intersections_result;
+}
+
+/**
+ * @brief Check if the line segment is within the boundary or intersects with the boundary.
+ * If the line segment is within the boundary, return the start and end points.
+ * If the line segment intersects with the boundary, return the intersection points.
+ *
+ * @param start Start point of the line segment.
+ * @param end End point of the line segment.
+ * @param rows Number of rows for the 1-D buffer.
+ * @param columns Number of columns for the 1-D buffer.
+ * @return std::optional<std::pair<Eigen::Vector2d, Eigen::Vector2d>> Start and end points of the line segment if the
+ * line segment is within the boundary. Intersection points of the line segment with the boundary if the line segment
+ * intersects with the boundary.
+ */
+inline std::optional<std::pair<Eigen::Vector2d, Eigen::Vector2d>>
+checkPointInBoundsOrIntersection(const Eigen::Vector2d& start, const Eigen::Vector2d& end, int rows, int columns)
+{
+  // If both of the points are within the boundary, return the points
+  if ((start[0] >= 0 && start[0] < columns && start[1] >= 0 && start[1] < rows) &&
+      (end[0] >= 0 && end[0] < columns && end[1] >= 0 && end[1] < rows)) {
+    return std::make_pair(start, end);
+  }
+
+  // If only the start point is within the boundary, return the start point and the intersection point of the line
+  // segment with the boundary
+  if (start[0] >= 0 && start[0] < columns && start[1] >= 0 && start[1] < rows) {
+    const Eigen::Vector2d direction = end - start;
+    GeometricVector2d line_segment(start, direction);
+    std::vector<Eigen::Vector2d> end_intersection = getIntersectionsWithBoundary(line_segment, rows, columns);
+    CHECK(end_intersection.size() == 1);
+    return std::make_pair(start, end_intersection[0]);
+  }
+
+  // If only the end point is within the boundary, return the intersection point of the line segment with the boundary
+  // and the end point
+  if (end[0] >= 0 && end[0] < columns && end[1] >= 0 && end[1] < rows) {
+    Eigen::Vector2d direction = start - end;
+    GeometricVector2d line_segment(end, direction);
+    std::vector<Eigen::Vector2d> start_intersection = getIntersectionsWithBoundary(line_segment, rows, columns);
+    CHECK(start_intersection.size() == 1);
+    return std::make_pair(start_intersection[0], end);
+  }
+
+  // If both of the points are outside the boundary, return the intersection points of the line segment with the
+  // boundary if it exists
+  Eigen::Vector2d direction = end - start;
+  GeometricVector2d line_segment(start, direction);
+  std::vector<Eigen::Vector2d> intersections = getIntersectionsWithBoundary(line_segment, rows, columns);
+  if (intersections.size() == 2) {
+    return std::make_pair(intersections[0], intersections[1]);
+  }
+
+  // Check if the line segment intersects with the boundary
+  return std::nullopt;
+}
+
+template <typename T>
+void rasterizeLineSegmentLow(int x0, int y0, int x1, int y1, const int rows, const int columns, std::vector<T>& buffer,
+                             T fill_value)
+{
+  int dx = x1 - x0;
+  int dy = y1 - y0;
+  int yi = 1;
+  if (dy < 0) {
+    yi = -1;
+    dy = -dy;
+  }
+  int D = 2 * dy - dx;
+  int y = y0;
+  for (int x = x0; x <= x1; x++) {
+    // If the point is out of range, do not update the buffer.
+    if (x >= 0 && y >= 0 && x < columns && y < rows) {
+      int idx = y * columns + x;
+      buffer[idx] = fill_value;
+    }
+    if (D > 0) {
+      y += yi;
+      D -= 2 * dx;
+    }
+    D += 2 * dy;
+  }
+}
+
+template <typename T>
+void rasterizeLineSegmentHigh(int x0, int y0, int x1, int y1, const int rows, const int columns, std::vector<T>& buffer,
+                              T fill_value)
+{
+  int dx = x1 - x0;
+  int dy = y1 - y0;
+  int xi = 1;
+  if (dx < 0) {
+    xi = -1;
+    dx = -dx;
+  }
+  int D = 2 * dx - dy;
+  int x = x0;
+  for (int y = y0; y <= y1; y++) {
+    // If the point is out of range, do not update the buffer.
+    if (x >= 0 && y >= 0 && x < columns && y < rows) {
+      int idx = y * columns + x;
+      buffer[idx] = fill_value;
+    }
+    if (D > 0) {
+      x += xi;
+      D -= 2 * dy;
+    }
+    D += 2 * dx;
+  }
+}
+
+} // namespace rasterization_lib
+
+/**
+ * @brief Rasterize a given line segment using Bresenham's line algorithm.
+ * Line segment is defined by two points (x0, y0) and (x1, y1).
+ * Link: https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm
+ *
+ * @param x0 First point x-coordinate.
+ * @param y0 First point y-coordinate.
+ * @param x1 Second point x-coordinate.
+ * @param y1 Second point y-coordinate.
+ * @param rows Number of rows for the 1-D buffer.
+ * @param columns Number of columns for the 1-D buffer.
+ * @param buffer 2-D matrix flattened to 1-D buffer, holds updated values from line segment.
+ * @param fill_value Fill value used to fill the buffer for a given line segment.
+ * @return std::vector<std::pair<int, int> > List of points in the line segment.
+ */
+template <typename T,
+          typename std::enable_if<std::is_integral<T>::value || std::is_floating_point<T>::value, int>::type = 0>
+void rasterizeLineSegment(const Eigen::Vector2d& start, const Eigen::Vector2d& end, const int rows, const int columns,
+                          std::vector<T>& buffer, T fill_value)
+{
+  // Check If the Line Segment Exists Within the Boundary or Intersects with the Boundary
+  std::optional<std::pair<Eigen::Vector2d, Eigen::Vector2d>> segment =
+      rasterization_lib::checkPointInBoundsOrIntersection(start, end, rows, columns);
+  if (!segment.has_value()) {
+    std::cerr << "Line segment does not exist within the boundary or intersect with the boundary" << std::endl;
+    return;
+  }
+
+  const int x0 = segment.value().first[0];
+  const int y0 = segment.value().first[1];
+  const int x1 = segment.value().second[0];
+  const int y1 = segment.value().second[1];
+  if (std::abs(y1 - y0) < std::abs(x1 - x0)) {
+    if (x0 > x1) {
+      rasterization_lib::rasterizeLineSegmentLow<T>(x1, y1, x0, y0, rows, columns, buffer, fill_value);
+    } else {
+      rasterization_lib::rasterizeLineSegmentLow<T>(x0, y0, x1, y1, rows, columns, buffer, fill_value);
+    }
+  } else {
+    if (y0 > y1) {
+      rasterization_lib::rasterizeLineSegmentHigh<T>(x1, y1, x0, y0, rows, columns, buffer, fill_value);
+    } else {
+      rasterization_lib::rasterizeLineSegmentHigh<T>(x0, y0, x1, y1, rows, columns, buffer, fill_value);
+    }
+  }
+}
+
+/**
+ * @brief Rasterize a given list of line segments.
+ * Line segments are defined by a list of points.
+ *
+ * @param line_segments List of points defining the line segments.
+ * @param rows Number of rows for the 1-D buffer.
+ * @param columns Number of columns for the 1-D buffer.
+ * @param buffer 2-D matrix flattened to 1-D buffer, holds updated values from line segments.
+ * @param fill_value Fill value used to fill the buffer for a given line segment.
+ */
+template <typename T,
+          typename std::enable_if<std::is_integral<T>::value || std::is_floating_point<T>::value, int>::type = 0>
+void rasterizeLineSegments(const std::vector<Eigen::Vector2d>& line_segments, const int rows, const int columns,
+                           std::vector<T>& buffer, T fill_value)
+{
+  for (size_t i = 0; i < line_segments.size(); i++) {
+    Eigen::Vector2d const& start = line_segments[i];
+    Eigen::Vector2d const& end = line_segments[(i + 1) % line_segments.size()];
+    rasterizeLineSegment<T>(start, end, rows, columns, buffer, fill_value);
+  }
+}
+
+
+} // namespace planning
diff --git a/planning/terminal_planner_libs/include/piano_mover/discretization_data.h b/planning/terminal_planner_libs/include/piano_mover/discretization_data.h
index 9fe5492ec..b2b7c7cf8 100644
--- a/planning/terminal_planner_libs/include/piano_mover/discretization_data.h
+++ b/planning/terminal_planner_libs/include/piano_mover/discretization_data.h
@@ -51,22 +51,22 @@ struct DiscretizationData final
     return (swap ? Id(y, x, t) : Id(x, y, t));
   }
 
-  float turning_radius; /**< Minimum turning radius for the mobile robot [meters] */
-  float cell_size;      /**< Cell size for the underlying spatial discretization [meters] */
+  float turning_radius;   /**< Minimum turning radius for the mobile robot [meters] */
+  float cell_size;        /**< Cell size for the underlying spatial discretization [meters] */
 
-  int space_dim_size; /**< Number of cells per side in the spatial dimension. Has to be a power of 2  */
-  int angle_dim_size; /**<  Number of cells in the angular dimension. Has to be a power of 2*/
+  int space_dim_size;     /**< Number of cells per side in the spatial dimension. Has to be a power of 2  */
+  int angle_dim_size;     /**<  Number of cells in the angular dimension. Has to be a power of 2*/
 
   int spatial_slice_size; /**< Number of cells in a spatial slice */
   int volume_size;        /**< Number of cells in the discretized configuration space */
   int log_space;          /**< Logarithm of the number of cells per side in the spatial dimension */
 
-  float delta_angle;    /**< Angular resolution of the discretization [radians] */
-  float turning_length; /**< Arc length of full turning motion for one cell [meters] */
+  float delta_angle;      /**< Angular resolution of the discretization [radians] */
+  float turning_length;   /**< Arc length of full turning motion for one cell [meters] */
 
-  int quarter_circle; /**< Number of cells in a quarter circle (pi / 2 radians)*/
+  int quarter_circle;     /**< Number of cells in a quarter circle (pi / 2 radians)*/
 
-  int fp_factor_log; /**< Logarithm of the fixed point factor */
+  int fp_factor_log;      /**< Logarithm of the fixed point factor */
 
   // Lookup tables
   std::vector<int> sin_lut;           /**< Lookup table for sin values */
@@ -76,9 +76,9 @@ struct DiscretizationData final
   // Additional views for LUTs
   // TODO: Consider using boost::span instead of naked pointers. This would require updating
   // the boost version currently used by ADK
-  int* cos_lut;       /**< Lookup table for cos values */
-  int* minus_sin_lut; /**< Lookup table for -sin values */
-  int* minus_cos_lut; /**< Lookup table for -cos values */
+  int* cos_lut;         /**< Lookup table for cos values */
+  int* minus_sin_lut;   /**< Lookup table for -sin values */
+  int* minus_cos_lut;   /**< Lookup table for -cos values */
 
   int* negative_length; /**< Lookup table for negative x increment per heading */
   int* swap_axes;       /**< Lookup table to indicate angle queries that require swapping axes */
diff --git a/planning/terminal_planner_libs/include/state_machine/state_machine.h b/planning/terminal_planner_libs/include/state_machine/state_machine.h
index e20a3ae52..8902b44ee 100644
--- a/planning/terminal_planner_libs/include/state_machine/state_machine.h
+++ b/planning/terminal_planner_libs/include/state_machine/state_machine.h
@@ -21,8 +21,8 @@ class FSMState
   virtual ~FSMState() = default;
 
   // Can be used to modify the state upon entering and exiting the state.
-  virtual void OnEnter() {};
-  virtual void OnExit() {};
+  virtual void OnEnter(){};
+  virtual void OnExit(){};
 
   // Updating the state returns an integer which essentially expresses an edge
   // with no successor state. The output can be used to connect the state to
diff --git a/planning/terminal_planner_libs/include/terminal_behavior_helpers.h b/planning/terminal_planner_libs/include/terminal_behavior_helpers.h
new file mode 100644
index 000000000..e860ed7e2
--- /dev/null
+++ b/planning/terminal_planner_libs/include/terminal_behavior_helpers.h
@@ -0,0 +1,88 @@
+#ifndef PLANNING_TERMINAL_BEHAVIOR_HELPERS_H_
+#define PLANNING_TERMINAL_BEHAVIOR_HELPERS_H_
+
+#include <Eigen/Core>
+#include <cmath>
+#include <optional>
+#include <string>
+#include <vector>
+
+#include "free_space_planner/free_space_planner.h"
+#include "free_space_planner/types.h"
+#include "planning_common/types/reference_line.h"
+#include "terminal_map_server/terminal_mappery/terminal_mappery.h"
+
+
+namespace planning {
+
+/**
+ * @brief Parameters for the Terminal Planner
+ */
+struct TerminalPlannerParams
+{
+  float transform_min_cost{ NAN };                     // Minimum cost for the distance transform
+  float transform_max_cost_parking_spot{ NAN };        // Maximum cost for the distance transform for parking spot
+  float transform_max_cost_static_obstacle{ NAN };     // Maximum cost for the distance transform for static obstacle
+  float transform_scale_cost{ NAN };                   // Scale for the distance transform
+  double costmap_longitudinal_margin{ NAN };           // Longitudinal Offset in CostMap2D [meters]
+  double free_space_path_extend_distance{ NAN };       // Extension distance of the free space path [meters]
+  double free_space_path_extend_delta_distance{ NAN }; // Distance between each point for extension of the free space
+                                                       // path [meters]
+};
+
+/**
+ * @brief Build a spline reference line from a path.
+ *
+ * @param path The path of Pose2D points to build the spline reference line from.
+ * @param ego_theta The theta of ego vehicle in radians
+ * @return The spline reference line or std::nullopt if the spline could not be built.
+ */
+std::optional<ReferenceLine> buildSplineReferenceLine(const std::vector<Pose2D>& path, double ego_theta);
+
+/**
+ * @brief Plan a path through free space
+ *
+ * @param free_space_planner_params Parameters for the free space planner
+ * @param ego_footprint Ego footprint of the vehicle
+ * @param terminal_planner_params Parameters for the terminal planner
+ * @param free_space_planner Free space planner
+ * @param terminal_map Terminal mappery
+ * @param start Start pose
+ * @param goal Goal pose
+ * @return std::vector<Pose2D> The planned path of Pose2D points
+ */
+std::vector<Pose2D> planFreeSpacePath(const FreeSpacePlannerParameters& free_space_planner_params,
+                                      const EgoFootprint& ego_footprint,
+                                      const TerminalPlannerParams& terminal_planner_params,
+                                      FreeSpacePlanner& free_space_planner, const TerminalMappery& terminal_map,
+                                      const Pose2D& start, const Pose2D& goal);
+/**
+ * @brief Rasterize the cost map for the scene
+ *
+ * @return std::vector<float> the rasterized cost map
+ */
+std::vector<float> rasterizeCostMap(const FreeSpacePlannerParameters& free_space_planner_params,
+                                    const TerminalPlannerParams& terminal_planner_params,
+                                    const TerminalMappery& terminal_map, const double offset_x, const double offset_y);
+
+/**
+ * @brief Convert GCS Location to UTM
+ *
+ * @param gcs_location GCS Location
+ * @return Eigen::Vector3d of UTM X, UTM Y, UTM theta
+ */
+Eigen::Vector3d convertGcsLocationToUtm(const GCSLocation& gcs_location);
+
+/**
+ * @brief Transform pose to a new coordinate frame
+ *
+ * @param dx translation in x
+ * @param dy translation in y
+ * @param d_theta rotation in radians
+ * @return Transformed pose
+ */
+Pose2D transformPoseCoordinateFrame(const Pose2D& pose, const double dx, const double dy, const double d_theta);
+
+} // namespace planning
+
+#endif // PLANNING_TERMINAL_BEHAVIOR_HELPERS_H_
diff --git a/planning/terminal_planner_libs/notebooks/free_space_planner.ipynb b/planning/terminal_planner_libs/notebooks/free_space_planner.ipynb
index 48b8fc2df..9536a7452 100644
--- a/planning/terminal_planner_libs/notebooks/free_space_planner.ipynb
+++ b/planning/terminal_planner_libs/notebooks/free_space_planner.ipynb
@@ -70,23 +70,23 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 4,
+   "execution_count": 15,
    "id": "195dbaf7",
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": [
-       "<matplotlib.image.AxesImage at 0x7fd9a3094d30>"
+       "<matplotlib.image.AxesImage at 0x7efc357af4c0>"
       ]
      },
-     "execution_count": 4,
+     "execution_count": 15,
      "metadata": {},
      "output_type": "execute_result"
     },
     {
      "data": {
-      "image/png": "",
+      "image/png": "",
       "text/plain": [
        "<Figure size 640x480 with 1 Axes>"
       ]
@@ -118,6 +118,7 @@
     "np_cm = np.zeros((size, size), dtype=np.float32)\n",
     "np_cm[0:spot_length_cells , 0:size:spot_width_cells]= 1.0\n",
     "np_cm[4 * spot_length_cells, 4 * spot_width_cells:6 * spot_width_cells] = 1.0\n",
+    "# np_cm = tp.rasterize_line_segment(0, 0, 100, 100, size, size, np_cm, 1.0)\n",
     "np_cm = compute_costmap(np_cm, 0.1, 1.0, 2.)\n",
     "cm = tp.Costmap2D(0., 0., cell_size, size, size, np_cm.ravel().data)\n",
     "plt.imshow(cm.to_np())"
@@ -143,7 +144,7 @@
     {
      "data": {
       "text/plain": [
-       "<matplotlib.image.AxesImage at 0x7fd99a9ebac0>"
+       "<matplotlib.image.AxesImage at 0x7efc402d01c0>"
       ]
      },
      "execution_count": 6,
diff --git a/planning/terminal_planner_libs/package.xml b/planning/terminal_planner_libs/package.xml
index 82abe3350..5583c2b4a 100644
--- a/planning/terminal_planner_libs/package.xml
+++ b/planning/terminal_planner_libs/package.xml
@@ -1,22 +1,16 @@
 <?xml version="1.0"?>
 <package format="2">
-  <name>terminal_planner_libs</name>
-  <version>0.0.0</version>
-  <description>Terminal Planner libraries</description>
-
-  <maintainer email="dizan@applied.co">Dizan Vasquez</maintainer>
-
-
-  <license>TODO</license>
-
-
-  <buildtool_depend>catkin</buildtool_depend>
-  <depend>roscpp</depend>
-  <depend>roslib</depend>
-  <depend>adk_standards</depend>
-
-  <test_depend>rosunit</test_depend>
-  <test_depend>gtest</test_depend>
-
-
+    <name>terminal_planner_libs</name>
+    <version>0.0.0</version>
+    <description>Terminal Planner libraries</description>
+    <maintainer email="dizan@applied.co">Dizan Vasquez</maintainer>
+    <license>TODO</license>
+    <buildtool_depend>catkin</buildtool_depend>
+    <depend>roscpp</depend>
+    <depend>roslib</depend>
+    <depend>adk_standards</depend>
+    <depend>planning_common</depend>
+    <depend>utils_math</depend>
+    <test_depend>rosunit</test_depend>
+    <test_depend>gtest</test_depend>
 </package>
diff --git a/planning/terminal_planner_libs/src/free_space_planner/distance.cpp b/planning/terminal_planner_libs/src/free_space_planner/distance.cpp
index ca62c5bbd..ed5623043 100644
--- a/planning/terminal_planner_libs/src/free_space_planner/distance.cpp
+++ b/planning/terminal_planner_libs/src/free_space_planner/distance.cpp
@@ -31,4 +31,26 @@ double Distance(const Vector2d& point, const Vector2d& segment_start, const Vect
   return sqrt(result);
 }
 
+std::pair<Vector2d, double> ClosestPoint(const Vector2d& point, const Vector2d& segment_start,
+                                         const Vector2d& segment_end)
+{
+  const Vector2d w = point - segment_start;
+  const Vector2d direction = segment_end - segment_start;
+  double proj = w.dot(direction);
+  double wsq = w.dot(w);
+  double dist2 = wsq;
+  if (proj <= 0.0) {
+    return { segment_start, sqrt(dist2) };
+  } else {
+    double vsq = direction.dot(direction);
+    if (proj >= vsq) {
+      dist2 = wsq - 2.0 * proj + vsq;
+      return { segment_end, sqrt(dist2) };
+    } else {
+      dist2 = wsq - proj * proj / vsq;
+      return { segment_start + (proj / vsq) * direction, sqrt(dist2) };
+    }
+  }
+}
+
 } // namespace planning
diff --git a/planning/terminal_planner_libs/src/free_space_planner/free_space_planner.cpp b/planning/terminal_planner_libs/src/free_space_planner/free_space_planner.cpp
index 766c7b696..7c327bec4 100644
--- a/planning/terminal_planner_libs/src/free_space_planner/free_space_planner.cpp
+++ b/planning/terminal_planner_libs/src/free_space_planner/free_space_planner.cpp
@@ -91,7 +91,6 @@ std::vector<std::vector<Pose2D>> FreeSpacePlanner::plan(const Pose2D& start, con
     return {};
   }
   Maneuvers maneuvers = planManeuvers(start, goal);
-
   if (maneuvers.empty()) {
     return {};
   }
diff --git a/planning/terminal_planner_libs/src/terminal_behavior_helpers.cpp b/planning/terminal_planner_libs/src/terminal_behavior_helpers.cpp
new file mode 100644
index 000000000..1a157d95d
--- /dev/null
+++ b/planning/terminal_planner_libs/src/terminal_behavior_helpers.cpp
@@ -0,0 +1,191 @@
+#include "terminal_behavior_helpers.h"
+
+#include "free_space_planner/angles.h"
+#include "free_space_planner/distance_transform.h"
+#include "free_space_planner/rasterization.h"
+#include "planning_common/utils/frame_transformation.h"
+#include "planning_common/utils/reference_line_utils.h"
+
+
+namespace planning {
+
+namespace {
+
+void calculateTraversalCostPerCell(std::vector<float>& distance_transform_costmap, const float min_cost,
+                                   const float max_cost, const float scale_cost)
+{
+  const auto transform_cost_to_go = [&min_cost, &max_cost, &scale_cost](float x) {
+    float cost_to_go = std::exp((-1.0 * x) / scale_cost) * max_cost;
+    return std::max(min_cost, cost_to_go);
+  };
+  std::transform(distance_transform_costmap.begin(), distance_transform_costmap.end(),
+                 distance_transform_costmap.begin(), transform_cost_to_go);
+}
+
+/**
+ * @brief Extend path by a given distance
+ *
+ * @param path [input/output] Path to extend
+ * @param theta Fixed angle to extend on
+ * @param distance Distance to extend
+ * @param delta_distance Delta distance
+ * @return void
+ */
+void extendPath(std::vector<Pose2D>& path, const double theta, const double distance, const double delta_distance)
+{
+  if (path.empty()) {
+    return;
+  }
+  Pose2D start = path.back();
+  const int num_steps = std::ceil(distance / delta_distance);
+  const double dx = delta_distance * std::cos(theta);
+  const double dy = delta_distance * std::sin(theta);
+  for (int i = 0; i < num_steps; ++i) {
+    path.emplace_back(Pose2D{ .x = start.x + i * dx, .y = start.y + i * dy, .theta = theta });
+  }
+}
+
+} // namespace
+
+std::optional<ReferenceLine> buildSplineReferenceLine(const std::vector<Pose2D>& path, double ego_theta)
+{
+  // Convert to Eigen matrix
+  Eigen::Matrix2Xd path_points(2, path.size());
+  for (std::size_t i = 0; i < path.size(); ++i) {
+    path_points(0, static_cast<int>(i)) = path[i].x;
+    path_points(1, static_cast<int>(i)) = path[i].y;
+  }
+
+  Eigen::Vector2d ego_heading_vec(std::cos(ego_theta), std::sin(ego_theta));
+
+  // Build the spline reference line, no lane id needed
+  return ReferenceLineUtils::buildSplineReferenceLine(path_points, ego_heading_vec, LaneID::PARKING_LANE, false);
+}
+
+std::vector<Pose2D> planFreeSpacePath(const FreeSpacePlannerParameters& free_space_planner_params,
+                                      const EgoFootprint& ego_footprint,
+                                      const TerminalPlannerParams& terminal_planner_params,
+                                      FreeSpacePlanner& free_space_planner, const TerminalMappery& terminal_map,
+                                      const Pose2D& start, const Pose2D& goal)
+{
+  // Initialize Free Space Planner Params
+  const int rows = free_space_planner_params.space_dim_size;
+  const int columns = free_space_planner_params.space_dim_size;
+  const float cell_size = free_space_planner_params.cell_size;
+
+  // Create the Costmap2D object
+  const double offset_x =
+      -1.0 * (ego_footprint.reference_to_rear + terminal_planner_params.costmap_longitudinal_margin);
+  const double offset_y = -1.0 * (free_space_planner_params.space_dim_size / 2.0) * free_space_planner_params.cell_size;
+
+  // Generate the Buffer to Rasterize Objects as part of the Cost Map Generation
+  const std::vector<float> buffer =
+      rasterizeCostMap(free_space_planner_params, terminal_planner_params, terminal_map, offset_x, offset_y);
+
+  Costmap2D costmap_2d(offset_x, offset_y, cell_size, rows, columns, buffer);
+
+  // Create the Free Space Planner Object
+  free_space_planner.SetCostmap(costmap_2d);
+
+  std::vector<std::vector<Pose2D>> free_space_plan = free_space_planner.plan(start, goal);
+
+  // Flatten path
+  std::vector<Pose2D> result_plan;
+  for (const auto& plan : free_space_plan) {
+    result_plan.insert(result_plan.end(), plan.begin(), plan.end());
+  }
+  if (result_plan.empty()) {
+    return {};
+  }
+
+  // Extend the path to ensure the vehicle reaches the parking spot with buffer
+  extendPath(result_plan, goal.theta, terminal_planner_params.free_space_path_extend_distance,
+             terminal_planner_params.free_space_path_extend_delta_distance);
+
+  return result_plan;
+}
+
+std::vector<float> rasterizeCostMap(const FreeSpacePlannerParameters& free_space_planner_params,
+                                    const TerminalPlannerParams& terminal_planner_params,
+                                    const TerminalMappery& terminal_map, const double offset_x, const double offset_y)
+{
+  std::vector<float> buffer;
+
+  // We rasterize all objects in the scene within a particular search radius
+  const int rows = free_space_planner_params.space_dim_size;
+  const int columns = free_space_planner_params.space_dim_size;
+  const double cell_size = free_space_planner_params.cell_size;
+
+  std::vector<float> parking_spot_buffer(rows * columns, 0.0);
+  std::vector<float> static_obstacle_buffer(rows * columns, 0.0);
+
+  const double search_radius = free_space_planner_params.cell_size * free_space_planner_params.space_dim_size;
+
+  // Get all Parking Spot Boundaries and Static Obstacle Boundaries within the search radius
+  std::vector<std::vector<Eigen::Vector2d>> parking_spot_boundaries =
+      terminal_map.getTerminalParkingBoundariesWithinDistance(search_radius);
+  std::vector<std::vector<Eigen::Vector2d>> static_obstacle_boundaries =
+      terminal_map.getStaticObstaclesBoundariesWithinDistance(search_radius);
+
+  auto transform_to_costmap_space = [cell_size, offset_x, offset_y](std::vector<Eigen::Vector2d>& boundary) {
+    std::transform(boundary.begin(), boundary.end(), boundary.begin(),
+                   [cell_size, offset_x, offset_y](Eigen::Vector2d& point) {
+                     return Eigen::Vector2d((point[0] - offset_x) / cell_size, (point[1] - offset_y) / cell_size);
+                   });
+    return boundary;
+  };
+
+  // Transform the boundaries to the costmap space
+  std::transform(parking_spot_boundaries.begin(), parking_spot_boundaries.end(), parking_spot_boundaries.begin(),
+                 transform_to_costmap_space);
+  std::transform(static_obstacle_boundaries.begin(), static_obstacle_boundaries.end(),
+                 static_obstacle_boundaries.begin(), transform_to_costmap_space);
+
+  constexpr float buffer_value = 1.0f;
+
+  // Rasterize the Parking Spot Boundaries
+  for (const std::vector<Eigen::Vector2d>& parking_spot_boundary : parking_spot_boundaries) {
+    rasterizeLineSegments(parking_spot_boundary, rows, columns, parking_spot_buffer, buffer_value);
+  }
+
+  // Rasterize the Static Obstacle Boundaries
+  for (const std::vector<Eigen::Vector2d>& static_obstacle_boundary : static_obstacle_boundaries) {
+    rasterizeLineSegments(static_obstacle_boundary, rows, columns, static_obstacle_buffer, buffer_value);
+  }
+
+  // Run Distance Transform on the Buffer
+  std::vector<float> dist_transform_parking_spot_buf = DistanceTransform(rows, columns, parking_spot_buffer);
+  calculateTraversalCostPerCell(dist_transform_parking_spot_buf, terminal_planner_params.transform_min_cost,
+                                terminal_planner_params.transform_max_cost_parking_spot,
+                                terminal_planner_params.transform_scale_cost);
+
+  std::vector<float> dist_transform_static_obstacle_buf = DistanceTransform(rows, columns, static_obstacle_buffer);
+  calculateTraversalCostPerCell(dist_transform_static_obstacle_buf, terminal_planner_params.transform_min_cost,
+                                terminal_planner_params.transform_max_cost_static_obstacle,
+                                terminal_planner_params.transform_scale_cost);
+
+  // Buffer is the max of the two distance transform costmaps, use std::transform
+  std::transform(dist_transform_parking_spot_buf.begin(), dist_transform_parking_spot_buf.end(),
+                 dist_transform_static_obstacle_buf.begin(), std::back_inserter(buffer),
+                 [](float a, float b) { return std::max(a, b); });
+
+  return buffer;
+}
+
+Eigen::Vector3d convertGcsLocationToUtm(const GCSLocation& gcs_location)
+{
+  double utm_x, utm_y;
+  map_utils::UtmZone zone = map_utils::getUtmZone(gcs_location.latitude_deg, gcs_location.longitude_deg);
+  map_utils::convertGpsToUtm(gcs_location.latitude_deg, gcs_location.longitude_deg, zone, &utm_x, &utm_y);
+  double utm_theta =
+      map_utils::getUtmTheta(zone, gcs_location.heading, gcs_location.latitude_deg, gcs_location.longitude_deg);
+  return Eigen::Vector3d(utm_x, utm_y, utm_theta);
+}
+
+Pose2D transformPoseCoordinateFrame(const Pose2D& pose, const double dx, const double dy, const double d_theta)
+{
+  const Eigen::Vector3d result = transformCoordinateFrame(Eigen::Vector3d(pose.x, pose.y, pose.theta), dx, dy, d_theta);
+  return Pose2D{ result[0], result[1], result[2] };
+}
+
+} // namespace planning
diff --git a/planning/terminal_planner_libs/src/terminal_planner_py.cpp b/planning/terminal_planner_libs/src/terminal_planner_py.cpp
index b7a20b9c9..d2ab1306e 100644
--- a/planning/terminal_planner_libs/src/terminal_planner_py.cpp
+++ b/planning/terminal_planner_libs/src/terminal_planner_py.cpp
@@ -9,6 +9,7 @@
 
 #include "free_space_planner/distance_transform.h"
 #include "free_space_planner/free_space_planner.h"
+#include "free_space_planner/rasterization.h"
 #include "piano_mover/c_space_costmap.h"
 #include "piano_mover/costmap2d.h"
 #include "piano_mover/discretization_data.h"
@@ -89,7 +90,9 @@ PYBIND11_MODULE(terminal_planner_py, m)
 
   py::class_<Pose2D>(m, "Pose2D")
       .def(py::init<>())
-      .def(py::init([](double x, double y, double theta) { return Pose2D{ x, y, theta }; }))
+      .def(py::init([](double x, double y, double theta) {
+        return Pose2D{ x, y, theta };
+      }))
       .def_readwrite("x", &Pose2D::x)
       .def_readwrite("y", &Pose2D::y)
       .def_readwrite("theta", &Pose2D::theta);
@@ -116,5 +119,23 @@ PYBIND11_MODULE(terminal_planner_py, m)
           return py::array({ rows, columns }, result->data(), capsule);
         });
 
+  m.def("rasterize_line_segment",
+        [](uint32_t x0, uint32_t y0, uint32_t x1, uint32_t y1, uint32_t rows, uint32_t columns,
+           py::array_t<double, py::array::c_style | py::array::forcecast> array, float fill_value) {
+          auto a = array.unchecked<2>();
+          std::vector<float>* result = new std::vector<float>(rows * columns);
+          uint32_t p = 0;
+          for (uint32_t r = 0; r < rows; ++r) {
+            for (uint32_t c = 0; c < columns; ++c) {
+              (*result)[p++] = a(r, c);
+            }
+          }
+          Eigen::Vector2d start(x0, y0);
+          Eigen::Vector2d end(x1, y1);
+          rasterizeLineSegment<float>(start, end, rows, columns, *result, fill_value);
+          auto capsule = py::capsule(result, [](void* v) { delete reinterpret_cast<std::vector<int>*>(v); });
+          return py::array({ rows, columns }, result->data(), capsule);
+        });
+
   m.attr("TRUCK_301") = TRUCK_301;
 }
diff --git a/planning/terminal_planner_libs/test/BUILD b/planning/terminal_planner_libs/test/BUILD
index 93aa1383d..934298e25 100644
--- a/planning/terminal_planner_libs/test/BUILD
+++ b/planning/terminal_planner_libs/test/BUILD
@@ -58,6 +58,17 @@ cc_test(
     ],
 )
 
+cc_test(
+    name = "rasterization_test",
+    srcs = ["rasterization_test.cpp"],
+    linkstatic = True,
+    deps = [
+        "//common/adk_standards",
+        "//planning/terminal_planner_libs",
+        "@com_google_googletest//:gtest",
+    ],
+)
+
 cc_test(
     name = "state_machine_test",
     srcs = ["state_machine_test.cpp"],
@@ -68,3 +79,13 @@ cc_test(
         "@com_google_googletest//:gtest",
     ],
 )
+
+cc_test(
+    name = "terminal_behavior_helpers_test",
+    srcs = ["terminal_behavior_helpers_test.cpp"],
+    linkstatic = True,
+    deps = [
+        "//planning/terminal_planner_libs",
+        "@com_google_googletest//:gtest",
+    ],
+)
diff --git a/planning/terminal_planner_libs/test/CMakeLists.txt b/planning/terminal_planner_libs/test/CMakeLists.txt
index eb125a664..cf0bc3fb3 100644
--- a/planning/terminal_planner_libs/test/CMakeLists.txt
+++ b/planning/terminal_planner_libs/test/CMakeLists.txt
@@ -18,4 +18,10 @@ target_link_libraries(geometric_vector_test terminal_planner_libs ${catkin_LIBRA
 catkin_add_gtest(maneuver_test maneuver_test.cpp)
 target_link_libraries(maneuver_test terminal_planner_libs ${catkin_LIBRARIES} ${rosunit_LIBRARIES})
 
+catkin_add_gtest(rasterization_test rasterization_test.cpp)
+target_link_libraries(rasterization_test terminal_planner_libs ${catkin_LIBRARIES} ${rosunit_LIBRARIES})
+
 catkin_add_gtest(state_machine_test state_machine_test.cpp)
+
+catkin_add_gtest(terminal_behavior_helpers_test terminal_behavior_helpers_test.cpp)
+target_link_libraries(terminal_behavior_helpers_test terminal_planner_libs ${catkin_LIBRARIES} ${rosunit_LIBRARIES})
diff --git a/planning/terminal_planner_libs/test/rasterization_test.cpp b/planning/terminal_planner_libs/test/rasterization_test.cpp
new file mode 100644
index 000000000..bf7d06bbe
--- /dev/null
+++ b/planning/terminal_planner_libs/test/rasterization_test.cpp
@@ -0,0 +1,196 @@
+#include "free_space_planner/rasterization.h"
+
+#include <math.h>
+
+#include <iostream>
+#include <vector>
+
+#include "gtest/gtest.h"
+
+namespace planning {
+namespace {
+
+TEST(rasterizeLineSegment, RasterizeHorizontalLineSegment)
+{
+  Eigen::Vector2d start(0, 0);
+  Eigen::Vector2d end(5, 0);
+  int rows = 10;
+  int columns = 10;
+  std::vector<int> buffer(rows * columns, 0);
+  int fill_value = 1;
+  planning::rasterizeLineSegment(start, end, rows, columns, buffer, fill_value);
+  for (int i = start[0]; i <= end[0]; i++) {
+    int idx = start[1] * columns + i;
+    EXPECT_EQ(buffer[idx], fill_value);
+  }
+}
+
+TEST(rasterizeLineSegment, RasterizeHorizontalLineSegmentFlipped)
+{
+  Eigen::Vector2d start(5, 0);
+  Eigen::Vector2d end(0, 0);
+  int rows = 10;
+  int columns = 10;
+  std::vector<int> buffer(rows * columns, 0);
+  int fill_value = 1;
+  planning::rasterizeLineSegment(start, end, rows, columns, buffer, fill_value);
+  for (int i = start[0]; i <= end[0]; i++) {
+    int idx = start[1] * columns + i;
+    EXPECT_EQ(buffer[idx], fill_value);
+  }
+}
+
+TEST(rasterizeLineSegment, RasterizeVerticalLineSegment)
+{
+  Eigen::Vector2d start(0, 0);
+  Eigen::Vector2d end(0, 5);
+  int rows = 10;
+  int columns = 10;
+  std::vector<int> buffer(rows * columns, 0);
+  int fill_value = 1;
+  planning::rasterizeLineSegment(start, end, rows, columns, buffer, fill_value);
+  for (int i = start[1]; i <= end[1]; i++) {
+    int idx = i * columns + start[0];
+    EXPECT_EQ(buffer[idx], fill_value);
+  }
+}
+
+TEST(rasterizeLineSegment, RasterizeVerticalLineSegmentFlipped)
+{
+  Eigen::Vector2d start(0, 5);
+  Eigen::Vector2d end(0, 0);
+  int rows = 10;
+  int columns = 10;
+  std::vector<int> buffer(rows * columns, 0);
+  int fill_value = 1;
+  planning::rasterizeLineSegment(start, end, rows, columns, buffer, fill_value);
+  for (int i = start[1]; i <= end[1]; i++) {
+    int idx = i * columns + start[0];
+    EXPECT_EQ(buffer[idx], fill_value);
+  }
+}
+
+TEST(rasterizeLineSegment, RasterizeDiagonalLineSegment)
+{
+  Eigen::Vector2d start(0, 0);
+  Eigen::Vector2d end(5, 5);
+  int rows = 10;
+  int columns = 10;
+  std::vector<int> buffer(rows * columns, 0);
+  int fill_value = 1;
+  planning::rasterizeLineSegment(start, end, rows, columns, buffer, fill_value);
+  for (int i = 0; i <= 5; i++) {
+    int idx = i * columns + i;
+    EXPECT_EQ(buffer[idx], fill_value);
+  }
+}
+
+TEST(rasterizeLineSegment, RasterizeOutOfRange)
+{
+  Eigen::Vector2d start(-5, -5);
+  Eigen::Vector2d end(-1, -1);
+  int rows = 10;
+  int columns = 10;
+  std::vector<int> buffer(rows * columns, 0);
+  int fill_value = 1;
+  planning::rasterizeLineSegment(start, end, rows, columns, buffer, fill_value);
+  for (int i = 0; i < rows * columns; i++) {
+    EXPECT_EQ(buffer[i], 0);
+  }
+}
+
+TEST(rasterizeLineSegment, RasterizePartiallyOutOfRange)
+{
+  Eigen::Vector2d start(-5, -5);
+  Eigen::Vector2d end(5, 5);
+  int rows = 10;
+  int columns = 10;
+  std::vector<int> buffer(rows * columns, 0);
+  int fill_value = 1;
+  planning::rasterizeLineSegment(start, end, rows, columns, buffer, fill_value);
+  for (int i = 0; i <= 5; i++) {
+    int idx = i * columns + i;
+    EXPECT_EQ(buffer[idx], fill_value);
+  }
+}
+
+TEST(rasterizeLineSegment, RasterizeVerticalLineSegmentPartiallyOutOfRange)
+{
+  Eigen::Vector2d start(5, -5);
+  Eigen::Vector2d end(5, 5);
+  int rows = 10;
+  int columns = 10;
+  std::vector<int> buffer(rows * columns, 0);
+  int fill_value = 1;
+  planning::rasterizeLineSegment(start, end, rows, columns, buffer, fill_value);
+
+  for (int i = 0; i < 10; i++) {
+    for (int j = 0; j < 5; j++) {
+      int idx = i * columns + j;
+      if (i <= 5 && j == 5) {
+        EXPECT_EQ(buffer[idx], fill_value);
+      } else {
+        EXPECT_EQ(buffer[idx], 0);
+      }
+    }
+  }
+}
+
+TEST(rasterizeLineSegment, RasterizeDiagonalLineSegmentPartiallyOutOfRange)
+{
+  Eigen::Vector2d start(-5, -5);
+  Eigen::Vector2d end(15, 15);
+  int rows = 10;
+  int columns = 10;
+  std::vector<int> buffer(rows * columns, 0);
+  int fill_value = 1;
+  planning::rasterizeLineSegment(start, end, rows, columns, buffer, fill_value);
+
+  for (int i = 0; i < 10; i++) {
+    for (int j = 0; j < 10; j++) {
+      int idx = i * columns + j;
+      if (i == j) {
+        EXPECT_EQ(buffer[idx], fill_value);
+      } else {
+        EXPECT_EQ(buffer[idx], 0);
+      }
+    }
+  }
+}
+
+TEST(rasterizeLineSegments, RasterizeMultipleLineSegments)
+{
+  int rows = 10;
+  int columns = 10;
+  std::vector<int> buffer(rows * columns, 0);
+  int fill_value = 1;
+  std::vector<Eigen::Vector2d> line_segments = { Eigen::Vector2d(1, 1), Eigen::Vector2d(1, 4), Eigen::Vector2d(4, 4),
+                                                 Eigen::Vector2d(4, 1) };
+
+  planning::rasterizeLineSegments(line_segments, rows, columns, buffer, fill_value);
+  for (int i = 1; i <= 4; i++) {
+    int idx = 1 * columns + i;
+    EXPECT_EQ(buffer[idx], fill_value);
+  }
+  for (int i = 1; i <= 4; i++) {
+    int idx = i * columns + 4;
+    EXPECT_EQ(buffer[idx], fill_value);
+  }
+  for (int i = 1; i <= 4; i++) {
+    int idx = 4 * columns + i;
+    EXPECT_EQ(buffer[idx], fill_value);
+  }
+  for (int i = 1; i <= 4; i++) {
+    int idx = i * columns + 1;
+    EXPECT_EQ(buffer[idx], fill_value);
+  }
+}
+
+} // namespace
+} // namespace planning
+
+int main(int argc, char** argv)
+{
+  testing::InitGoogleTest(&argc, argv);
+  return RUN_ALL_TESTS();
+}
diff --git a/planning/terminal_planner_libs/test/state_machine_test.cpp b/planning/terminal_planner_libs/test/state_machine_test.cpp
index 148d6afae..4223fc4f3 100644
--- a/planning/terminal_planner_libs/test/state_machine_test.cpp
+++ b/planning/terminal_planner_libs/test/state_machine_test.cpp
@@ -20,8 +20,8 @@ namespace {
 class FirstCounterState : public FSMState
 {
  public:
-  FirstCounterState() : FSMState(/*id=*/0, /*name=*/"FirstCounter") {};
-  void OnEnter() override {};
+  FirstCounterState() : FSMState(/*id=*/0, /*name=*/"FirstCounter"){};
+  void OnEnter() override{};
   int Update() override;
   void OnExit() override;
 
@@ -32,9 +32,9 @@ class FirstCounterState : public FSMState
 class SecondCounterState : public FSMState
 {
  public:
-  SecondCounterState() : FSMState(/*id=*/1, /*name=*/"SecondCounter") {};
+  SecondCounterState() : FSMState(/*id=*/1, /*name=*/"SecondCounter"){};
 
-  void OnEnter() override {};
+  void OnEnter() override{};
   int Update() override;
   void OnExit() override;
 
diff --git a/planning/terminal_planner_libs/test/terminal_behavior_helpers_test.cpp b/planning/terminal_planner_libs/test/terminal_behavior_helpers_test.cpp
new file mode 100644
index 000000000..a631cf1ed
--- /dev/null
+++ b/planning/terminal_planner_libs/test/terminal_behavior_helpers_test.cpp
@@ -0,0 +1,58 @@
+#include "terminal_behavior_helpers.h"
+
+#include <gtest/gtest.h>
+
+namespace planning {
+namespace {
+
+constexpr double RESOLUTION = 0.3;
+
+TEST(TerminalBehaviorHelpers, buildSplineReferenceLineVertical)
+{
+  Pose2D p1{ 0.0, 0.0, 0.0 };
+  Pose2D p2{ 1.0, 0.0, 0.0 };
+  Pose2D p3{ 2.0, 0.0, 0.0 };
+
+  std::vector<Pose2D> path{ p1, p2, p3 };
+  std::optional<ReferenceLine> ref_line = buildSplineReferenceLine(path, 0);
+  ASSERT_TRUE(ref_line.has_value());
+
+  size_t expected_num_points = static_cast<size_t>(2.0 / RESOLUTION) + 1;
+  ASSERT_EQ(ref_line->getPoints().size(), expected_num_points);
+
+  for (const auto& point : ref_line->getPoints()) {
+    ASSERT_NEAR(point.tangent[0], 1.0, 1e-6);
+    ASSERT_NEAR(point.tangent[1], 0.0, 1e-6);
+  }
+}
+
+TEST(TerminalBehaviorHelpers, buildSplineReferenceLineDiagonal)
+{
+  Pose2D p1{ 1.0, 1.0, 0.0 };
+  Pose2D p2{ 2.0, 2.0, 0.0 };
+  Pose2D p3{ 3.0, 3.0, 0.0 };
+  Pose2D p4{ 4.0, 4.0, 0.0 };
+  Pose2D p5{ 5.0, 5.0, 0.0 };
+
+  std::vector<Pose2D> path{ p1, p2, p3, p4, p5 };
+  std::optional<ReferenceLine> ref_line = buildSplineReferenceLine(path, M_PI / 4.0);
+  ASSERT_TRUE(ref_line.has_value());
+
+  size_t expected_num_points = static_cast<size_t>(sqrt(2 * 4.0 * 4.0) / RESOLUTION) + 1;
+  ASSERT_EQ(ref_line->getPoints().size(), expected_num_points);
+
+  for (const auto& point : ref_line->getPoints()) {
+    ASSERT_NEAR(point.tangent[0], 1.0 / std::sqrt(2.0), 1e-6);
+    ASSERT_NEAR(point.tangent[1], 1.0 / std::sqrt(2.0), 1e-6);
+  }
+}
+
+} // namespace
+} // namespace planning
+
+
+int main(int argc, char** argv)
+{
+  testing::InitGoogleTest(&argc, argv);
+  return RUN_ALL_TESTS();
+}
